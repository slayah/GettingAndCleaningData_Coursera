library(httr)
install.packages("httr")
library(httr)
myapp=oauth_app("twitter",key="yourConsumerKeyHere",secret="yourConsumerSecretHere")
sig=sign_oauth1.0(myapp,token="yourTokenHere",token_secret = "yourTokenSecretHere")
homeTL=GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
install.packages("base64enc")
homeTL=GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
library(XML)
fileUrl<-"http://www.w3schools.com/xml/simple.xml"
library(XML)
fileUrl<-"http://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(fileUrl,useInternal=True)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl<-"http://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
head(state)
state.x77
library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
par("lty")
par("col")
par("pch")
par("bg")
## [1] "transparent"
par("mar")
## [1] 5.1 4.1 4.1 2.1
par("mfrow")
## [1] 1 1
library(datasets)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City") ## Add a title
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",
type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",
pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model)
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
pdf(file = "myplot.pdf") ## Open PDF device; create 'myplot.pdf' in my working directory
## Create plot and send to a file (no plot appears on screen)
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data") ## Annotate plot; still nothing on screen
dev.off() ## Close the PDF file device
## Now you can view the file 'myplot.pdf' on your computer
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data") ## Annotate plot; still nothing on screen
dev.off()
library(lattice)
library(datasets)
## Simple scatterplot
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
p <- xyplot(Ozone ~ Wind, data = airquality)  ## Nothing happens!
print(p)  ## Plot appears
## Custom panel function
xyplot( y ~ x | f, panel=function(x, y,...){
panel.xyplot(x,y,...)
panel.abline(h=median(y),lty=2)
})
## Custom panel function
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
## Custom panel function
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
## Custom panel function
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
## Custom panel function
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
## Custom panel function:regression line
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call default panel function
panel.lmline(x, y, col = 2)  ## Overlay a simple linear regression line
})
library(ggplot2)
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,geom = c("point","smooth"))
qplot(displ,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets = .~drv)
qplot(hwy,data=mpg,facets = drv~.)
qplot(hwy,data=mpg,facets = drv~.,binwidth=2)
str(maacs)
library(datasets)
str(maacs)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dataFrame <- data.frame(x = x, y = y)
dataFrame
dist(dataFrame)
dist(dataFrame)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
hclustering$height
hClustering$height
hClustering$merge
hClustering$labels
hClustering$height
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
y
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
print(y)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
heatmap(dataMatrix)
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
str(airquality)
str(mpg)
qplot(log(drv),data=mpg)
library(ggplot2)
qplot(log(drv),data=mpg)
qplot(log(cty),data=mpg)
qplot(log(cty),data=mpg)
qplot(log(cty),data=mpg,color=drv)
qplot(log(cty),data=mpg,fill=drv)
qplot(log(cty),data=mpg,geom=density)
qplot(log(cty),data=mpg,geom="density")
qplot(log(cty),data=mpg,geom="density",color=drv)
qplot(log(cty),year,data=mpg,fill=drv)
qplot(log(cty),year,data=mpg)
qplot(cty,year,data=mpg)
qplot(cty,year,data=mpg,shape=drv)
qplot(cty,year,data=mpg,color=drv)
qplot(cty,year,data=mpg,color=drv,geom=c("point","smooth"),method="lm")
qplot(cty,year,data=mpg,geom=c("point","smooth"),method="lm",facets = .~drv)
str(ChickWeight)
qplot(weight,Time,data=ChickWeight)
qplot(weight,Time,data=ChickWeight,shape=Diet)
qplot(weight,Time,data=ChickWeight,color=Diet)
qplot(log(weight),Time,data=ChickWeight)
g1<-ggplot(mpg,aes(cty,year))
summary(g1)
g2<-ggplot(ChickWeight,aes(weight,Time))
summary(g2)
g1+geom_point()
g2+geom_point()
g1+geom_point()+geom_smooth()
g2+geom_point()+geom_smooth()
g1+geom_point()+geom_smooth()
g1+geom_point()+facet_grid(.~drv)+geom_smooth()
g2+geom_point()+facet_grid(.~Diet)+geom_smooth()
g1+geom_point(color="steelblue",size=4,alpha=1/2)
g2+geom_point(aes(color=Diet),size=4,alpha=1/2)
g2+geom_point(aes(color=Diet)+labs(title="Chick Weight Dataset"),x="Weight",y="Time")
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
hClustering$merge
hClustering$labels
a <- c(1,2,3,4,5)
b<-rep(a)
b
b<-rep(a,2)
b
a<-3
b<-rep(a)
b
a<-3
b<-rep(a,2)
b
set.seed(1234)
par(mar = c(0, 0, 0, 0))
#hclust
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
hClustering$height
hClustering$merge
hClustering$order
hClustering$call
hClustering$height
hClustering$method
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
#print(y)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
heatmap(dataMatrix)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
Needed <- c("tm", "SnowballCC", "RColorBrewer", "ggplot2", "wordcloud", "biclust", "cluster", "igraph", "fpc")
install.packages(Needed, dependencies=TRUE)
install.packages(Needed, dependencies = TRUE)
install.packages(Needed, dependencies = TRUE)
install.packages(Needed, dependencies = TRUE)
install.packages(Needed, dependencies = TRUE)
install.packages(Needed, dependencies = TRUE)
install.packages(Needed, dependencies = TRUE)
Needed <- c("tm", "SnowballCC", "RColorBrewer", "ggplot2", "wordcloud", "biclust", "cluster", "igraph", "fpc")
install.packages(Needed, dependencies=TRUE)
install.packages(Needed, dependencies = TRUE)
install.packages("C:\Users\smgambhi\Downloads\RColorBrewer_1.1-2.zip",repos=NULL,type="source")
install.packages("C:\Users\smgambhi\Downloads\RColorBrewer_1.0-5.tar.gz",repos=NULL,type="source")
install.packages("RColorBrewer", repos = "http://www.omegahat.org/R", type="source")
install.packages("Rcmdr")
call = paste("http://api.musixmatch.com/ws/1.1/track.lyrics.get?",
"track_id=", 15445219,
"&apikey=", 98cab7817f22ad3d1c53b19610496963,
"&format=xml", sep = "")
call = paste("http://api.musixmatch.com/ws/1.1/track.lyrics.get?",
"track_id=", "15445219",
"&apikey=", "98cab7817f22ad3d1c53b19610496963",
"&format=xml", sep = "")
xml <- xmlParse(call)
install.packages("xml")
install.packages("XML")
install.packages("XML")
xml <- xmlParse(call)
library("XML")
xml <- xmlParse(call)
install.packages("installr"); require(installr)
updateR()
call = paste("http://api.musixmatch.com/ws/1.1/track.lyrics.get?",
"track_id=", "15445219",
"&apikey=", "98cab7817f22ad3d1c53b19610496963",
"&format=xml", sep = "")
call = paste("http://api.musixmatch.com/ws/1.1/track.lyrics.get?",
"track_id=", "15445219",
"&apikey=", "98cab7817f22ad3d1c53b19610496963",
"&format=xml", sep = "")
library("XML")
library(UsingR)
install.packages("UsingR")
install.packages("UsingR")
library(UsingR)
data(father.son)
x<-father.son$height
n<-length(x)
round(c(var(x),var(x)/n,sd(x),sd(x)/sqrt(n)),2)
x<-father.son$height
n<-length(x)
round(c(var(x),var(x)/n,sd(x),sd(x)/sqrt(n)),2)
round(c(var(x),var(x)/n,sd(x),sd(x)/sqrt(n)),2)
x
data(father.son)
x<-father.son$sheight
n<-length(x)
round(c(var(x),var(x)/n,sd(x),sd(x)/sqrt(n)),2)
#binomial distribution in R
#probability of getting 7 or more girls in 8 births
pbinom(6,size=8,prob=0.5,lower.tail = FALSE)
sp<-sqrt((7*15.34^2+20*18.23^2)/(8+21-2))
132.86-127.44 + c(-1,1) * qt(0.975,27) * sp * (1/8+1/21)^0.5
#Mistakenly treating sleep data as grouped
data(sleep)
g1<-sleep$extra[1:10]
g2<-sleep$extra[11:20]
n1<-length(g1);n2<-length(g2)
sp<-sqrt( ((n1-1) * sd(g1)^2 + (n2-1) * sd(g2)^2) / (n1+n2-2) )
sp
md<-mean(g2)-mean(g1)
semd <- sp * sqrt(1/n1 + 1/n2)
md<-mean(g2)-mean(g1)
semd <- sp * sqrt(1/n1 + 1/n2)
rbind(
md + c(-1,1) * qt(0.975,n1+n2-2)*semd,
t.test(g2,g1,paired = FALSE, var.equal = TRUE)$conf,
t.test(g2,g1,paired = TRUE)$conf
)
data("ChickWeight")
library(reshape2)
wideCW <- dcast(ChickWeight, Diet+Chick ~ Time,value.var = "weight")
wideCW
head(ChickWeight)
names(wideCW)[-(1 : 2)] <- paste("time",names(wideCW)[-(1 : 2)], sep="")
wideCW
names(ChickWeight)
names(ChickWeight)[-1]
names(ChickWeight)[-(1:1)]
names(ChickWeight)[-(1:2)]
names(ChickWeight)[(1:2)]
names(ChickWeight)
names(ChickWeight)[(1:2)]
names(wideCW)
library(dplyr)
install.packages("dplyr")
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "6244199b07d6328d3961",
secret = "afa88e4cb716a6049f7f319f95b11be08c2f641f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",
key = "6244199b07d6328d3961",
secret = "afa88e4cb716a6049f7f319f95b11be08c2f641f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("sqldf")
library(datasets)
data(iris)
str(iris)
iris$Species
data<-iris[iris$Species==virginica,]
data<-iris[iris$Species=="virginica",]
data
mean(data$Sepal.Length)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
mean(data$Sepal.Length)
library(datasets)
data(mtcars)
mean(mtcars[mtcars$cyl==4,4])-mean(mtcars[mtcars$cyl==8,4])
mean(data$Sepal.Length)
apply(iris[, 1:4], 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars[mtcars$cyl==4,4])-mean(mtcars[mtcars$cyl==8,4])
install.packages("jpeg")
library(jpeg)
install.packages("jpeg")
setwd("C:/Users/smgambhi/Downloads/Data Science Specialization/3.Getting and Cleaning Data/GettingAndCleaningData_Coursera")
library(data.table)
library(reshape2)
library(plyr)
library(dplyr)
X_test<-read.table("dataset/test/X_test.txt")
X_train<-read.table("dataset/train/X_train.txt")
Y_test<-read.table("dataset/test/Y_test.txt")
Y_train<-read.table("dataset/train/Y_train.txt")
features<-read.table("dataset/features.txt")
activities <- read.table("dataset/activity_labels.txt",col.names=c("activity_id","activity_name"))
test_subject_id <- read.table("dataset/test/subject_test.txt")
train_subject_id <- read.table("dataset/train/subject_train.txt")
features<-features$V2
colnames(X_train) <- features
colnames(X_test) <- features
colnames(test_subject_id) <- "subject_id"
colnames(train_subject_id) <- "subject_id"
colnames(Y_test) <- "activity_id"
colnames(Y_train) <- "activity_id"
###########PART 1#####################
X_test <- cbind(test_subject_id , Y_test , X_test)
X_train <- cbind(train_subject_id , Y_train , X_train)
data <- rbind(X_train,X_test)
data <- unique(data)
######################################
###########PART 2#####################
mean_index <- grep("mean",names(data),ignore.case=TRUE)
mean_columns <- names(data)[mean_index]
std_index <- grep("std",names(data),ignore.case=TRUE)
std_columns <- names(data)[std_index]
mean_std<-data[,c("subject_id","activity_id",mean_columns,std_columns)]
######################################
###########PART 3 & 4#####################
mean_std_act <- merge(activities,mean_std,by.x="activity_id",by.y="activity_id",all=TRUE)
######################################
###########PART 5#####################
melt_data <- melt(mean_std_act,id=c("activity_id","activity_name","subject_id"))
mean_data <- dcast(melt_data,activity_id + activity_name + subject_id ~ variable,mean)
head(mean_data)
names(mean_data)
colnames(mean_data)
write.table(colnames(mean_data),"features.txt",row.names = FALSE)
names(mean_data)
